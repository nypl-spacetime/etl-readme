#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const argv = require('minimist')(process.argv.slice(2))
const R = require('ramda')

const etlPrefix = 'etl-'
const githubOrg = 'https://github.com/nypl-spacetime/'

if (!argv._[0]) {
  console.error(`Usage: spacetime-generate-etl-readme [-o file] /path/to/etl-module/\n` +
      `  -o    output file. if not given, spacetime-generate-etl-readme uses stdout`)
  process.exit(1)
}

const dir = path.resolve(argv._[0])
const etlId = path.basename(dir).replace(etlPrefix, '')

let dataset
let script
try {
  dataset = require(path.join(dir, `${etlId}.dataset.json`))
  script = require(path.join(dir, etlId))
} catch (err) {
  console.error('Could not load ETL module:\n', err.message)
  process.exit(1)
}

const steps = script.steps.map((step) => step.name)

const lastStep = steps[steps.length - 1]
const data = `
## Data

The dataset created by this ETL module’s \`${lastStep}\` step can be found in the [data section of the NYC Space/Time Directory website](http://spacetime.nypl.org/#data-${dataset.id}).
`

const defined = (val, key) => val !== undefined
let table = R.pickBy(defined, R.pick([
  'id',
  'title',
  'description',
  'license',
  'contributors',
  'sources',
  'schema',
  'homepage',
  'dependsOn'
], dataset))

const titles = {
  'id': 'ID',
  'title': 'Title',
  'description': 'Description',
  'license': 'License',
  'contributors': 'Contributors',
  'sources': 'Sources',
  'homepage': 'Homepage',
  'dependsOn': 'Depends on'
}

const titleize = (kv) => ([
  titles[kv[0]],
  kv[1]
])

function makeLink (href, text) {
  if (!href) {
    return text
  }

  return `<a href="${href}">${text || href}</a>`
}

function makeList (items) {
  if (items.length === 1) {
    return items[0]
  }

  return `<ul>${items.map((item) => `<li>${item}</li>`).join('')}</ul>`
}

const transforms = {
  id: (value) => `<code>${value}</code>`,
  homepage: (value) => makeLink(value),
  sources: (value) => {
    const sources = value
      .map((source) => makeLink(source.path, source.title))
    return makeList(sources)
  },
  contributors: (value) => {
    const contributors = value
      .map((contributor) => contributor.title + (contributor.role ? ` (${contributor.role})` : ''))
    return makeList(contributors)
  },
  dependsOn: (value) => {
    return value
      .map((dependency) => {
        let module, step
        [module, step] = dependency.split('.')

        if (module !== '*') {
          return `<code><a href="${githubOrg}${etlPrefix}${module}">${module}</a>.${step}</code>`
        } else {
          return `<code>${dependency}</code>`
        }
      })
      .join(', ')
  }
}

const rows = R.toPairs(table)
  .filter((kv) => kv[0] && kv[1])
  .map((kv) => transforms[kv[0]] ? [kv[0], transforms[kv[0]](kv[1])] : kv)
  .filter((kv) => kv[1] && titles[kv[0]])
  .map(titleize)
  .map((row) => `
<tr>
<td>${row[0]}</td>
<td>${row[1]}</td>
</tr>`
  )

let jsonSchema = ''
if (table.schema) {
  jsonSchema = `\n[JSON Schema](http://json-schema.org/) of Object data:

\`\`\`json
${JSON.stringify(table.schema, null, 2)}
\`\`\`
`
}

let extraReadme = ''
const extraReadmePath = path.join(dir, `${etlId}.md`)
if (fs.existsSync(extraReadmePath)) {
  extraReadme = '\n' + fs.readFileSync(extraReadmePath, 'utf8').trim() + '\n'
}

const readme = `
# NYC Space/Time Directory ETL module: ${dataset.title}

[ETL](https://en.wikipedia.org/wiki/Extract,_transform,_load) module for NYPL’s [NYC Space/Time Direcory](http://spacetime.nypl.org/). This Node.js module downloads, parses, and/or transforms ${dataset.title} data, and creates a NYC Space/Time Directory dataset.
${extraReadme}
${data}
## Details

<table>
<tbody>
${rows.join('\n')}
</tbody>
</table>
${jsonSchema}
## Available steps

${steps.map((step) => `  - \`${step}\``).join('\n')}

## Usage

\`\`\`
git clone ${githubOrg}${etlPrefix}${dataset.id}.git /path/to/etl-modules
cd /path/to/etl-modules/${etlPrefix}${dataset.id}
npm install

spacetime-etl ${dataset.id}[.<step>]
\`\`\`

See http://github.com/nypl-spacetime/spacetime-etl for information about Space/Time's ETL tool. More Space/Time ETL modules [can be found on GitHub](https://github.com/search?utf8=%E2%9C%93&q=org%3Anypl-spacetime+etl-&type=Repositories&ref=advsearch&l=&l=).

_This README file is generated by [generate-etl-readme](https://github.com/nypl-spacetime/generate-etl-readme)._
`

const output = readme.trim() + '\n'
if (argv.o) {
  fs.writeFileSync(argv.o, output)
} else {
  console.log(output)
}
